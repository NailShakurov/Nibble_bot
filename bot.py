import os
import logging
import json
from datetime import datetime, timedelta
import requests
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
# # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞.–ü—Ä–∏ –¥–µ–ø–ª–æ–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
# from dotenv import load_dotenv
# # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞. –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
# load_dotenv()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_LOCATION, SELECTING_LOCATION = range(3)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_data.json"

# API –∫–ª—é—á –¥–ª—è OpenWeatherMap
WEATHER_API_KEY = os.environ.get("OPENWEATHER_API_KEY")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(data):
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id, user_data):
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {
            "locations": []
        }
    return user_data[user_id_str]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = load_user_data()
    user = get_user_data(update.effective_user.id, user_data)
    save_user_data(user_data)
    
    buttons = [
        [
            InlineKeyboardButton("üé£ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞", callback_data="show_forecast"),
            InlineKeyboardButton("üìç –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏", callback_data="show_locations")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="add_location"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç-–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –∫–ª—ë–≤–∞ —Ä—ã–±—ã. –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–æ–≥–¥–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ä—ã–±–∞–ª–∫—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "üé£ */forecast* - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞\n"
        "üìç */locations* - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ª–æ–∫–∞—Ü–∏–π\n"
        "‚ûï */add_location* - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é\n"
        "‚ùì */help* - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "1. –î–æ–±–∞–≤—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏\n"
        "2. –ó–∞–ø—Ä–æ—Å–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞\n"
        "3. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ—Ü–µ–Ω–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–ª—ë–≤–∞\n\n"
        "*–§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–ª—ë–≤:*\n"
        "‚Ä¢ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∏ –≤–æ–¥—ã\n"
        "‚Ä¢ –í–µ—Ç–µ—Ä (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞)\n"
        "‚Ä¢ –û–±–ª–∞—á–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –û—Å–∞–¥–∫–∏\n"
        "‚Ä¢ –§–∞–∑—ã –ª—É–Ω—ã"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')
    return CHOOSING_ACTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
async def add_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['expecting_location'] = True
    buttons = [[InlineKeyboardButton("üîÑ –û—Ç–º–µ–Ω–∞", callback_data="restart")]]
    await update.message.reply_text(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ä—ã–±–∞—á–∏—à—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°–æ—á–∏",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return ADDING_LOCATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
async def location_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API –ø–æ–≥–æ–¥—ã
    try:
        weather_data = get_weather_data(location_name)
        location_info = {
            "name": weather_data["name"],
            "country": weather_data["sys"]["country"],
            "lat": weather_data["coord"]["lat"],
            "lon": weather_data["coord"]["lon"],
            "added_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = load_user_data()
        user = get_user_data(update.effective_user.id, user_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏
        location_exists = False
        for loc in user["locations"]:
            if loc["name"] == location_info["name"] and loc["country"] == location_info["country"]:
                location_exists = True
                break
        
        if location_exists:
            await update.message.reply_text(f"–õ–æ–∫–∞—Ü–∏—è {location_info['name']} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫!")
        else:
            user["locations"].append(location_info)
            save_user_data(user_data)
            await update.message.reply_text(
                f"‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìç *{location_info['name']}, {location_info['country']}*\n"
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_info['lat']}, {location_info['lon']}\n\n"
                f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Error adding location: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
    
    return CHOOSING_ACTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∏ –ª–æ–∫–∞—Ü–∏–∏
async def show_locations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ callback
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        message = query.message
    else:
        user_id = update.effective_user.id
        message = update.message

    user_data = load_user_data()
    user = get_user_data(user_id, user_data)
    
    if not user["locations"]:
        text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π. –ù–∞–∂–º–∏ –Ω–∞ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏."
        if update.callback_query:
            await query.edit_message_text(text)
        else:
            await message.reply_text(text)
        return CHOOSING_ACTION
    
    locations_text = "üìç *–ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏:*\n\n"
    buttons = []
    
    for i, loc in enumerate(user["locations"]):
        locations_text += f"{i+1}. {loc['name']}, {loc['country']}\n"
        buttons.append([InlineKeyboardButton(
            f"{loc['name']}, {loc['country']}", 
            callback_data=f"location_{i}"
        )])
    
    buttons.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="delete_location")])
    buttons.append([InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")])
    
    if update.callback_query:
        await query.edit_message_text(
            locations_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await message.reply_text(
            locations_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    return SELECTING_LOCATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞
async def forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ callback
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        message = query.message
    else:
        user_id = update.effective_user.id
        message = update.message

    user_data = load_user_data()
    user = get_user_data(user_id, user_data)
    
    if not user["locations"]:
        text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π. –ù–∞–∂–º–∏ –Ω–∞ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏."
        if update.callback_query:
            await query.edit_message_text(text)
        else:
            await message.reply_text(text)
        return CHOOSING_ACTION
    
    buttons = []
    for i, loc in enumerate(user["locations"]):
        buttons.append([InlineKeyboardButton(
            f"{loc['name']}, {loc['country']}", 
            callback_data=f"forecast_{i}"
        )])
    
    buttons.append([InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")])
    
    text = "üé£ –í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª—ë–≤–∞:"
    if update.callback_query:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))
    
    return SELECTING_LOCATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_data = load_user_data()
    user = get_user_data(query.from_user.id, user_data)
    
    if data == "restart":
        buttons = [
            [
                InlineKeyboardButton("üé£ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞", callback_data="show_forecast"),
                InlineKeyboardButton("üìç –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏", callback_data="show_locations")
            ],
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="add_location"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await query.edit_message_text(
            f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return CHOOSING_ACTION
    
    elif data == "show_forecast":
        return await forecast_command(update, context)
    
    elif data == "show_locations":
        return await show_locations(update, context)
    
    elif data == "add_location":
        await query.edit_message_text(
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ä—ã–±–∞—á–∏—à—å.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°–æ—á–∏"
        )
        return ADDING_LOCATION
    
    elif data == "help":
        help_text = (
            "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
            "üé£ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞\n"
            "üìç –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏ - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ª–æ–∫–∞—Ü–∏–π\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é\n"
            "‚ùì –ü–æ–º–æ—â—å - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
            "1. –î–æ–±–∞–≤—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏\n"
            "2. –ó–∞–ø—Ä–æ—Å–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞\n"
            "3. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ—Ü–µ–Ω–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–ª—ë–≤–∞\n\n"
            "*–§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–ª—ë–≤:*\n"
            "‚Ä¢ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∏ –≤–æ–¥—ã\n"
            "‚Ä¢ –í–µ—Ç–µ—Ä (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞)\n"
            "‚Ä¢ –û–±–ª–∞—á–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –û—Å–∞–¥–∫–∏\n"
            "‚Ä¢ –§–∞–∑—ã –ª—É–Ω—ã"
        )
        
        buttons = [[InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")]]
        await query.edit_message_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='Markdown'
        )
        return CHOOSING_ACTION
    
    elif data.startswith("location_"):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
        location_index = int(data.split("_")[1])
        location = user["locations"][location_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
        weather_forecast = get_weather_forecast(location["lat"], location["lon"])
        
        location_text = (
            f"üìç *{location['name']}, {location['country']}*\n\n"
            f"üå§ *–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:*\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_forecast['current']['temp']}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_forecast['current']['feels_like']}¬∞C\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {weather_forecast['current']['pressure']} –≥–ü–∞\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_forecast['current']['humidity']}%\n"
            f"–í–µ—Ç–µ—Ä: {weather_forecast['current']['wind_speed']} –º/—Å, {get_wind_direction(weather_forecast['current']['wind_deg'])}\n"
            f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_forecast['current']['clouds']}%\n"
        )
        
        await query.message.reply_text(location_text, parse_mode='Markdown')
    
    elif data.startswith("forecast_"):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª—ë–≤–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
        location_index = int(data.split("_")[1])
        location = user["locations"][location_index]
        
        await query.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è {location['name']}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
        weather_forecast = get_weather_forecast(location["lat"], location["lon"])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –Ω–∞ 3 –¥–Ω—è
        forecast_text = f"üé£ *–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –¥–ª—è {location['name']}*\n\n"
        
        # –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã
        moon_phase = get_moon_phase()
        forecast_text += f"üåô –§–∞–∑–∞ –ª—É–Ω—ã: {moon_phase['name']}\n\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–ª–µ–¥—É—é—â–∏–µ 2 –¥–Ω—è
        for i in range(3):
            date = (datetime.now() + timedelta(days=i)).strftime("%d.%m.%Y")
            daily_forecast = weather_forecast['daily'][i]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª—ë–≤–∞
            bite_probability, factors = calculate_bite_probability(daily_forecast, moon_phase)
            bite_rating = get_bite_rating(bite_probability)
            
            forecast_text += f"üìÖ *{date}*\n"
            forecast_text += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {daily_forecast['temp']['day']}¬∞C\n"
            forecast_text += f"üí® –í–µ—Ç–µ—Ä: {daily_forecast['wind_speed']} –º/—Å, {get_wind_direction(daily_forecast['wind_deg'])}\n"
            forecast_text += f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {daily_forecast['clouds']}%\n"
            forecast_text += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {daily_forecast['humidity']}%\n"
            forecast_text += f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {daily_forecast['pressure']} –≥–ü–∞\n"
            forecast_text += f"üåß –û—Å–∞–¥–∫–∏: {daily_forecast.get('rain', 0)} –º–º\n"
            forecast_text += f"üé£ –ö–ª—ë–≤: {bite_rating}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            forecast_text += "üëç –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:\n"
            for factor in factors['positive']:
                forecast_text += f"  ‚Ä¢ {factor}\n"
            
            forecast_text += "üëé –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:\n"
            for factor in factors['negative']:
                forecast_text += f"  ‚Ä¢ {factor}\n"
            
            forecast_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        forecast_text += "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä—ã–±–∞–ª–∫–µ:*\n"
        
        if bite_probability > 75:
            forecast_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.\n"
            forecast_text += "‚Ä¢ –•–∏—â–Ω–∞—è —Ä—ã–±–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏.\n"
        elif bite_probability > 50:
            forecast_text += "‚Ä¢ –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Ä—ã–±–∞–ª–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã.\n"
            forecast_text += "‚Ä¢ –°—Ç–æ–∏—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ª–æ–≤–ª–∏.\n"
        elif bite_probability > 25:
            forecast_text += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–ª—ë–≤, –ª—É—á—à–µ —Ä—ã–±–∞—á–∏—Ç—å –≤ —Å–∞–º–æ–µ —Ç–∏—Ö–æ–µ –≤—Ä–µ–º—è –¥–Ω—è.\n"
            forecast_text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏ –∏ –Ω–∞—Å–∞–¥–∫–∏.\n"
        else:
            forecast_text += "‚Ä¢ –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–ª—ë–≤–∞, —Ä—ã–±–∞ –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω–∞.\n"
            forecast_text += "‚Ä¢ –ï—Å–ª–∏ –≤—Å—ë –∂–µ —Ä–µ—à–∏—Ç–µ —Ä—ã–±–∞—á–∏—Ç—å, —Å—Ç–æ–∏—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö –º–µ—Å—Ç–∞—Ö.\n"
        
        await query.message.reply_text(forecast_text, parse_mode='Markdown')
    
    elif data == "delete_location":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if not user["locations"]:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π.")
            return CHOOSING_ACTION
        
        buttons = []
        for i, loc in enumerate(user["locations"]):
            buttons.append([InlineKeyboardButton(
                f"–£–¥–∞–ª–∏—Ç—å: {loc['name']}", 
                callback_data=f"remove_{i}"
            )])
        
        buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    elif data.startswith("remove_"):
        location_index = int(data.split("_")[1])
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        if 0 <= location_index < len(user["locations"]):
            removed_location = user["locations"].pop(location_index)
            save_user_data(user_data)
            
            await query.edit_message_text(
                f"–õ–æ–∫–∞—Ü–∏—è {removed_location['name']} —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=None
            )
    
    elif data == "cancel_delete":
        await query.edit_message_text(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
    
    return CHOOSING_ACTION

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
def get_weather_data(location_name):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={location_name}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"Failed to get weather data: {response.status_code}")
    return response.json()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

def get_weather_forecast(lat, lon):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ API
    –≤–º–µ—Å—Ç–æ OneCall API (–∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)
    """
    try:
        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        current_weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        current_response = requests.get(current_weather_url)
        
        if current_response.status_code != 200:
            raise Exception(f"Failed to get current weather: {current_response.status_code}")
        
        current_data = current_response.json()
        
        # 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        forecast_response = requests.get(forecast_url)
        
        if forecast_response.status_code != 200:
            raise Exception(f"Failed to get forecast: {forecast_response.status_code}")
        
        forecast_data = forecast_response.json()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
        result = {
            "current": {
                "temp": current_data["main"]["temp"],
                "feels_like": current_data["main"]["feels_like"],
                "pressure": current_data["main"]["pressure"],
                "humidity": current_data["main"]["humidity"],
                "wind_speed": current_data["wind"]["speed"],
                "wind_deg": current_data["wind"]["deg"],
                "clouds": current_data["clouds"]["all"]
            },
            "daily": []
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º –∏ –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        days_data = {}
        for item in forecast_data["list"]:
            date = item["dt_txt"].split(" ")[0]
            if date not in days_data:
                days_data[date] = []
            days_data[date].append(item)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for date, items in days_data.items():
            if len(result["daily"]) >= 3:  # –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ 3 –¥–Ω—è
                break
                
            temp_sum = sum(item["main"]["temp"] for item in items)
            temp_avg = temp_sum / len(items)
            
            temp_day = max(item["main"]["temp"] for item in items)
            temp_night = min(item["main"]["temp"] for item in items)
            
            pressure_sum = sum(item["main"]["pressure"] for item in items)
            pressure_avg = pressure_sum / len(items)
            
            humidity_sum = sum(item["main"]["humidity"] for item in items)
            humidity_avg = humidity_sum / len(items)
            
            wind_speed_sum = sum(item["wind"]["speed"] for item in items)
            wind_speed_avg = wind_speed_sum / len(items)
            
            wind_deg_sum = sum(item["wind"]["deg"] for item in items)
            wind_deg_avg = wind_deg_sum / len(items)
            
            clouds_sum = sum(item["clouds"]["all"] for item in items)
            clouds_avg = clouds_sum / len(items)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∂–¥—è
            rain = 0
            for item in items:
                if "rain" in item and "3h" in item["rain"]:
                    rain += item["rain"]["3h"]
            
            day_data = {
                "temp": {
                    "day": temp_day,
                    "night": temp_night
                },
                "pressure": pressure_avg,
                "humidity": humidity_avg,
                "wind_speed": wind_speed_avg,
                "wind_deg": wind_deg_avg,
                "clouds": clouds_avg
            }
            
            if rain > 0:
                day_data["rain"] = rain
            
            result["daily"].append(day_data)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 3 –¥–Ω—è, –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        while len(result["daily"]) < 3:
            if result["daily"]:
                result["daily"].append(result["daily"][-1])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                result["daily"].append({
                    "temp": {"day": current_data["main"]["temp"], "night": current_data["main"]["temp"] - 5},
                    "pressure": current_data["main"]["pressure"],
                    "humidity": current_data["main"]["humidity"],
                    "wind_speed": current_data["wind"]["speed"],
                    "wind_deg": current_data["wind"]["deg"],
                    "clouds": current_data["clouds"]["all"]
                })
        
        return result
        
    except Exception as e:
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.error(f"Error getting weather data: {e}")
        return {
            "current": {
                "temp": 15.5,
                "feels_like": 14.8,
                "pressure": 1013,
                "humidity": 76,
                "wind_speed": 3.6,
                "wind_deg": 220,
                "clouds": 75
            },
            "daily": [
                {
                    "temp": {"day": 15.5, "night": 10.2},
                    "pressure": 1013,
                    "humidity": 76,
                    "wind_speed": 3.6,
                    "wind_deg": 220,
                    "clouds": 75
                },
                {
                    "temp": {"day": 16.8, "night": 11.5},
                    "pressure": 1012,
                    "humidity": 70,
                    "wind_speed": 4.1,
                    "wind_deg": 200,
                    "clouds": 60
                },
                {
                    "temp": {"day": 17.2, "night": 12.0},
                    "pressure": 1010,
                    "humidity": 65,
                    "wind_speed": 3.8,
                    "wind_deg": 210,
                    "clouds": 45
                }
            ]
        }

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
def get_wind_direction(degrees):
    directions = ["–°", "–°–í", "–í", "–Æ–í", "–Æ", "–Æ–ó", "–ó", "–°–ó"]
    index = round(degrees / 45) % 8
    return directions[index]

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –ª—É–Ω—ã
def get_moon_phase():
    # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –ª—É–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
    current_day = datetime.now().day
    month_days = 30  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
    
    moon_phase_day = current_day % 30
    
    if moon_phase_day < 2:
        return {"phase": 0, "name": "–ù–æ–≤–æ–ª—É–Ω–∏–µ üåë", "fishing_factor": 0.7}
    elif moon_phase_day < 7:
        return {"phase": 1, "name": "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø üåí", "fishing_factor": 0.8}
    elif moon_phase_day < 9:
        return {"phase": 2, "name": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å üåì", "fishing_factor": 0.9}
    elif moon_phase_day < 14:
        return {"phase": 3, "name": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞ üåî", "fishing_factor": 0.85}
    elif moon_phase_day < 16:
        return {"phase": 4, "name": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ üåï", "fishing_factor": 1.0}
    elif moon_phase_day < 21:
        return {"phase": 5, "name": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞ üåñ", "fishing_factor": 0.85}
    elif moon_phase_day < 23:
        return {"phase": 6, "name": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å üåó", "fishing_factor": 0.75}
    elif moon_phase_day < 28:
        return {"phase": 7, "name": "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø üåò", "fishing_factor": 0.7}
    else:
        return {"phase": 0, "name": "–ù–æ–≤–æ–ª—É–Ω–∏–µ üåë", "fishing_factor": 0.7}

# –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª—ë–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
def calculate_bite_probability(weather_data, moon_phase):
    probability = 50  # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    positive_factors = []
    negative_factors = []
    
    # –§–∞–∫—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temp = weather_data['temp']['day']
    if 15 <= temp <= 25:
        probability += 15
        positive_factors.append(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp}¬∞C)")
    elif 10 <= temp < 15 or 25 < temp <= 30:
        probability += 5
        positive_factors.append(f"–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp}¬∞C)")
    elif temp < 5 or temp > 35:
        probability -= 20
        negative_factors.append(f"–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp}¬∞C)")
    elif 5 <= temp < 10 or 30 < temp <= 35:
        probability -= 10
        negative_factors.append(f"–ù–µ –æ—á–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp}¬∞C)")
    
    # –§–∞–∫—Ç–æ—Ä –≤–µ—Ç—Ä–∞
    wind_speed = weather_data['wind_speed']
    if wind_speed < 2:
        probability += 10
        positive_factors.append("–°–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä")
    elif 2 <= wind_speed <= 5:
        probability += 5
        positive_factors.append("–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä")
    elif 5 < wind_speed <= 8:
        probability -= 5
        negative_factors.append("–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä")
    else:
        probability -= 15
        negative_factors.append("–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä")
    
    # –§–∞–∫—Ç–æ—Ä –¥–∞–≤–ª–µ–Ω–∏—è –∏ –µ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ
    pressure = weather_data['pressure']
    if 1010 <= pressure <= 1020:
        probability += 10
        positive_factors.append("–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ")
    elif (1000 <= pressure < 1010) or (1020 < pressure <= 1030):
        probability += 0
    else:
        probability -= 10
        negative_factors.append("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ")
    
    # –§–∞–∫—Ç–æ—Ä –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
    clouds = weather_data['clouds']
    if 30 <= clouds <= 70:
        probability += 10
        positive_factors.append("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å")
    elif clouds < 30:
        probability += 5
        positive_factors.append("–Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞")
    else:
        probability -= 5
        negative_factors.append("–ü–∞—Å–º—É—Ä–Ω–∞—è –ø–æ–≥–æ–¥–∞")
    
    # –§–∞–∫—Ç–æ—Ä –æ—Å–∞–¥–∫–æ–≤
    if 'rain' in weather_data and weather_data['rain'] > 0:
        rain = weather_data['rain']
        if rain < 2:
            probability += 5  # –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã
            positive_factors.append("–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å")
        elif 2 <= rain <= 5:
            probability -= 5
            negative_factors.append("–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å")
        else:
            probability -= 15
            negative_factors.append("–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å")
    
    # –§–∞–∫—Ç–æ—Ä —Ñ–∞–∑—ã –ª—É–Ω—ã
    moon_factor = moon_phase['fishing_factor']
    probability *= moon_factor
    
    if moon_factor >= 0.9:
        positive_factors.append(f"–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã ({moon_phase['name']})")
    elif moon_factor <= 0.7:
        negative_factors.append(f"–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã ({moon_phase['name']})")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 100
    probability = max(0, min(100, probability))
    
    return probability, {"positive": positive_factors, "negative": negative_factors}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª—ë–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
def get_bite_rating(probability):
    if probability >= 80:
        return "üî•üî•üî•üî•üî• –û—Ç–ª–∏—á–Ω—ã–π –∫–ª—ë–≤"
    elif probability >= 60:
        return "üî•üî•üî•üî• –•–æ—Ä–æ—à–∏–π –∫–ª—ë–≤"
    elif probability >= 40:
        return "üî•üî•üî• –°—Ä–µ–¥–Ω–∏–π –∫–ª—ë–≤"
    elif probability >= 20:
        return "üî•üî• –°–ª–∞–±—ã–π –∫–ª—ë–≤"
    else:
        return "üî• –û—á–µ–Ω—å —Å–ª–∞–±—ã–π –∫–ª—ë–≤"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return CHOOSING_ACTION
        
    text = update.message.text
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons = [[InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")]]
    reply_markup = InlineKeyboardMarkup(buttons)
    
    if text.startswith("/"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏
        if context.user_data.get('expecting_location'):
            context.user_data['expecting_location'] = False
            return await location_received(update, context)
            
    return CHOOSING_ACTION

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_ACTION: [
                CommandHandler("help", help_command),
                CommandHandler("forecast", forecast_command),
                CommandHandler("locations", show_locations),
                CommandHandler("add_location", add_location),
                CallbackQueryHandler(button_callback),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
            ],
            ADDING_LOCATION: [
                CallbackQueryHandler(button_callback),
                MessageHandler(filters.TEXT & ~filters.COMMAND, location_received),
            ],
            SELECTING_LOCATION: [
                CallbackQueryHandler(button_callback),
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(button_callback, pattern="^restart$")
        ],
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()